!pip install mediapipe

!pip install opencv-python

!pip install mediapipe == 0.8.11

import cv2
import mediapipe as mp
import numpy as np
import math

mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

def calculate_angle(a, b, c):
    a = np.array(a)  #العضلة الامامية مهرية
    b = np.array(b)  #العضلة الخلفية متنية
    c = np.array(c)  #السمانة متهانة
    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(radians * 180.0 / np.pi)

    if angle > 180.0:
        angle = 360 - angle

    return angle

def calculate_accuracy(counter_left, counter_right):
    total_predictions = counter_left + counter_right
    if total_predictions == 0:
        return 0
    accuracy = ((counter_left + counter_right) / (2 * total_predictions)) * 100
    return accuracy


cap = cv2.VideoCapture(0)

################
pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

pose = mp.solutions.pose.Pose(
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5
)

counter_left = 0
counter_right = 0
stage_left = None
stage_right = None

# Main loop
while cap.isOpened():
    ret, frame = cap.read()

    # Convert frame to RGB
    image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Detect landmarks
    result = pose.process(image)

    # Convert RGB to BGR
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    try:
        landmarks = result.pose_landmarks.landmark

        # Left hand calculations
        left_shoulders = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,
                          landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
        left_elbo = [landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].x,
                     landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value].y]
        left_wrist = [landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].x,
                      landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value].y]
        left_angle = calculate_angle(left_shoulders, left_elbo, left_wrist)

        if left_angle > 150:
            stage_left = 'down'
        elif left_angle < 45 and stage_left == 'down':
            stage_left = 'up'
            counter_left += 1
            print(f"Left Counter: {counter_left}")

        # Right hand calculations
        right_shoulders = [landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x,
                           landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y]
        right_elbo = [landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].x,
                      landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value].y]
        right_wrist = [landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].x,
                       landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value].y]
        right_angle = calculate_angle(right_shoulders, right_elbo, right_wrist)

        if right_angle > 150:
            stage_right = 'down'
        elif right_angle < 45 and stage_right == 'down':
            stage_right = 'up'
            counter_right += 1
            print(f"Right Counter: {counter_right}")

    except:
        pass

    mp_drawing.draw_landmarks(
        image,
        result.pose_landmarks,
        mp_pose.POSE_CONNECTIONS,
        mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=4, circle_radius=2),
        mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=4)
    )

    # Add counter to the image
    cv2.putText(image, f"Left Counter: {counter_left}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)
    cv2.putText(image, f"Right Counter: {counter_right}", (300, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    cv2.imshow('test', image)

    if cv2.waitKey(10) == ord('k'):
        break

cap.release()
cv2.destroyAllWindows()


accuracy = calculate_accuracy(counter_left, counter_right)
print(f"Accuracy: {accuracy:.2f}%")
